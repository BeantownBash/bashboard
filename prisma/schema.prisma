// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model SystemConfigSetting {
    key   String @id
    value Json
}

model Vote {
    id   String @id @default(cuid())
    year Year

    title       String
    description String?

    linkedForm String

    ballots Ballot[]

    canVote Project[] @relation("CanVote")
    voteFor Project[] @relation("VoteFor")

    open Boolean @default(false)
}

model Ballot {
    vote   Vote   @relation(fields: [voteId], references: [id], onDelete: Cascade)
    voteId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    // this is the project that allows the user to vote in this vote
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String

    securityKey String

    isCast Boolean @default(false)

    @@id([voteId, userId])
}

enum Year {
    Y23
}

model LogoImage {
    id        String   @id
    url       String
    createdAt DateTime @default(now()) @map(name: "created_at")
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String   @unique

    @@map(name: "logo_images")
}

model BannerImage {
    id        String   @id
    url       String
    createdAt DateTime @default(now()) @map(name: "created_at")
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String   @unique

    @@map(name: "banner_images")
}

model Project {
    id          String  @id @default(cuid())
    title       String
    tagline     String?
    description String?
    members     User[]
    year        Year

    githubLink  String?
    videoLink   String?
    websiteLink String?
    extraLinks  ExtraLink[]

    logo   LogoImage?
    banner BannerImage?

    invites TeamInvite[]

    votesCanVote Vote[] @relation("CanVote")
    votesFor     Vote[] @relation("VoteFor")

    reponsibleBallots Ballot[]

    @@map(name: "projects")
}

model ExtraLink {
    id        String  @id @default(cuid())
    name      String
    url       String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String

    @@map(name: "extra_links")
}

model TeamInvite {
    id        String  @id @default(cuid())
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@map(name: "team_invites")
}

model Post {
    id        String   @id @default(cuid())
    title     String
    slug      String   @unique
    content   String
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    @@map(name: "posts")
}

model User {
    id        String   @id @default(cuid())
    name      String?
    email     String   @unique
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")

    // next auth
    accounts      Account[]
    sessions      Session[]
    emailVerified DateTime?

    // 2023 project
    project   Project?     @relation(references: [id], fields: [projectId], onDelete: SetNull)
    projectId String?
    invites   TeamInvite[]

    // admin stuff
    isAdmin Boolean @default(false)

    ballots Ballot[]

    @@map(name: "users")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
